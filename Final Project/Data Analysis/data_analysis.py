import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression

"""
top_left run ouput

xReadings : [62, 62, 62, 60, 62, 61, 61, 62, 62, 60, 60, 62, 62, 60, 61, 62, 60, 60, 61, 62, 60, 60, 60, 61, 62, 61, 60, 61, 61, 62, 60, 61, 62, 61, 60, 61, 60, 61, 60, 64, 61, 62, 62, 61, 62, 60, 62, 61, 61, 61, 60, 60, 42, 60, 62, 62, 61, 60, 61, 61, 61, 61, 60, 60, 62, 60, 61, 61, 61, 60, 62, 61, 60, 62, 61, 62, 60, 60, 62, 60, 46, 47, 84, 57, 61, 60, 61, 60, 60, 60, 60, 62, 62, 60, 60, 60, 61, 61, 61, 61, 60, 62, 61, 62, 60, 61, 60, 61, 62, 62, 62, 62, 61, 62, 62, 60, 62, 120, 61, 62, 61, 60, 61, 62, 60, 60, 60, 62, 60, 60, 61, 61, 60, 60, 60, 62, 60, 60, 60, 62, 61, 60, 62, 60, 60, 60, 61, 60, 60, 61, 2]
xRAReadings : [62, 62, 62, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 61, 61, 60, 61, 61, 61, 61, 60, 60, 60, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 60, 58, 57, 58, 58, 58, 58, 58, 61, 61, 61, 60, 60, 60, 60, 60, 60, 60, 60, 61, 60, 60, 61, 61, 61, 61, 60, 61, 61, 58, 56, 59, 59, 59, 59, 59, 61, 63, 59, 60, 62, 62, 61, 61, 60, 60, 60, 60, 60, 60, 60, 61, 61, 61, 61, 60, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 69, 69, 69, 69, 69, 69, 69, 61, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 81]
yReadings : [81, 80, 81, 81, 81, 81, 81, 81, 81, 81, 81, 80, 81, 80, 81, 81, 80, 81, 81, 81, 81, 80, 80, 81, 81, 81, 81, 81, 81, 80, 81, 80, 81, 81, 79, 81, 81, 81, 81, 87, 81, 81, 81, 81, 80, 80, 80, 81, 80, 81, 80, 80, 79, 81, 81, 80, 81, 81, 80, 81, 81, 79, 81, 81, 81, 81, 81, 81, 81, 81, 80, 80, 81, 81, 81, 80, 81, 80, 81, 81, 87, 77, 1, 81, 81, 81, 81, 81, 81, 80, 80, 81, 81, 81, 81, 81, 80, 81, 80, 80, 80, 81, 80, 81, 81, 81, 81, 81, 81, 81, 80, 81, 80, 81, 81, 80, 81, 115, 81, 81, 81, 81, 81, 80, 81, 81, 81, 81, 81, 80, 81, 81, 80, 81, 81, 80, 80, 81, 81, 80, 77, 81, 81, 81, 81, 81, 80, 81, 81, 81, 62]
yRAReadings : [81, 80, 80, 80, 80, 80, 80, 80, 81, 81, 81, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 81, 81, 81, 81, 81, 81, 81, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 81, 81, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 81, 81, 69, 69, 69, 69, 69, 69, 69, 80, 80, 81, 81, 81, 81, 81, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 81, 80, 80, 80, 80, 80, 80, 80, 85, 85, 85, 85, 85, 85, 85, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 62]

"""
def top_left():
    print("Top Left")
    x = np.array([62, 62, 62, 60, 62, 61, 61, 62, 62, 60, 60, 62, 62, 60, 61, 62, 60, 60, 61, 62, 60, 60, 60, 61, 62, 61, 60, 61, 61, 62, 60, 61, 62, 61, 60, 61, 60, 61, 60, 64, 61, 62, 62, 61, 62, 60, 62, 61, 61, 61, 60, 60, 42, 60, 62, 62, 61, 60, 61, 61, 61, 61, 60, 60, 62, 60, 61, 61, 61, 60, 62, 61, 60, 62, 61, 62, 60, 60, 62, 60, 46, 47, 84, 57, 61, 60, 61, 60, 60, 60, 60, 62, 62, 60, 60, 60, 61, 61, 61, 61, 60, 62, 61, 62, 60, 61, 60, 61, 62, 62, 62, 62, 61, 62, 62, 60, 62, 120, 61, 62, 61, 60, 61, 62, 60, 60, 60, 62, 60, 60, 61, 61, 60, 60, 60, 62, 60, 60, 60, 62, 61, 60, 62, 60, 60, 60, 61, 60, 60, 61])
    xRA = np.array([62, 62, 62, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 61, 61, 60, 61, 61, 61, 61, 60, 60, 60, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 60, 58, 57, 58, 58, 58, 58, 58, 61, 61, 61, 60, 60, 60, 60, 60, 60, 60, 60, 61, 60, 60, 61, 61, 61, 61, 60, 61, 61, 58, 56, 59, 59, 59, 59, 59, 61, 63, 59, 60, 62, 62, 61, 61, 60, 60, 60, 60, 60, 60, 60, 61, 61, 61, 61, 60, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 69, 69, 69, 69, 69, 69, 69, 61, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60])
    y = np.array([81, 80, 81, 81, 81, 81, 81, 81, 81, 81, 81, 80, 81, 80, 81, 81, 80, 81, 81, 81, 81, 80, 80, 81, 81, 81, 81, 81, 81, 80, 81, 80, 81, 81, 79, 81, 81, 81, 81, 87, 81, 81, 81, 81, 80, 80, 80, 81, 80, 81, 80, 80, 79, 81, 81, 80, 81, 81, 80, 81, 81, 79, 81, 81, 81, 81, 81, 81, 81, 81, 80, 80, 81, 81, 81, 80, 81, 80, 81, 81, 87, 77, 1, 81, 81, 81, 81, 81, 81, 80, 80, 81, 81, 81, 81, 81, 80, 81, 80, 80, 80, 81, 80, 81, 81, 81, 81, 81, 81, 81, 80, 81, 80, 81, 81, 80, 81, 115, 81, 81, 81, 81, 81, 80, 81, 81, 81, 81, 81, 80, 81, 81, 80, 81, 81, 80, 80, 81, 81, 80, 77, 81, 81, 81, 81, 81, 80, 81, 81, 81])
    yRA = np.array([81, 80, 80, 80, 80, 80, 80, 80, 81, 81, 81, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 81, 81, 81, 81, 81, 81, 81, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 81, 81, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 81, 81, 69, 69, 69, 69, 69, 69, 69, 80, 80, 81, 81, 81, 81, 81, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 81, 80, 80, 80, 80, 80, 80, 80, 85, 85, 85, 85, 85, 85, 85, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80])
    print("x, average = {}, standard deviation = {}, min = {}, max = {}".format(x.mean(), x.std(), min(x), max(x)))
    print("xRa, average = {}, standard deviation = {}, min = {}, max = {}".format(xRA.mean(), xRA.std(), min(xRA), max(xRA)))
    print("y, average = {}, standard deviation = {}, min = {}, max = {}".format(y.mean(), y.std(), min(y), max(y)))
    print("yRa, average = {}, standard deviation = {}, min = {}, max = {}".format(yRA.mean(), yRA.std(), min(yRA), max(yRA)))

def linear_fit(distance_readings_tuples, min_linear_distance = 4):
    scatter_distances = None
    linear_fit_distances = None
    scatter_readings = None
    linear_fit_readings = None
    max_distance = min_linear_distance

    for distance, reading_set in distance_readings_tuples:
        if scatter_distances is None:
            scatter_distances = np.array([distance]*len(reading_set))
            scatter_readings = np.array(reading_set)
        else:
            scatter_distances = np.append(scatter_distances, [distance]*len(reading_set), axis=None)
            scatter_readings = np.append(scatter_readings, reading_set, axis=None)

        if distance > min_linear_distance:
            if linear_fit_distances is None:
                linear_fit_distances = np.array([distance]*len(reading_set))
                linear_fit_readings = np.array(reading_set)
            else:
                linear_fit_distances = np.append(linear_fit_distances, [distance]*len(reading_set), axis=None)
                linear_fit_readings = np.append(linear_fit_readings, reading_set, axis=None)

        if distance > max_distance:
            max_distance = distance

    linear_fit_distances = linear_fit_distances.reshape(-1, 1)
    linear_fit_readings =linear_fit_readings.reshape(-1, 1)

    regressor = LinearRegression()
    regressor.fit(linear_fit_distances, linear_fit_readings)
    x = np.linspace(min_linear_distance, max_distance, 2)
    y = regressor.coef_[0, 0]*x + regressor.intercept_[0]

    print("y = {}x + {}".format(regressor.coef_, regressor.intercept_))

    plt.scatter(scatter_distances, scatter_readings, c='blue', label="Linear Fit Graph for Sensor")
    plt.plot(x, y, c='black', label='Linear fit')
    plt.xlabel('distance')
    plt.ylabel('sensor response')
    plt.legend()
    plt.show()


if __name__ == "__main__":
    #OUTPUT y = [[2.96188645]]x + [42.0747619]
    front_sonar_readings = [
        (0, [55, 61, 60, 57, 60, 56, 59, 60, 62, 61, 58, 60, 54, 59, 57, 62, 58, 59, 55, 59, 58, 58, 55, 59, 54, 58, 60, 57, 59, 57, 60, 59, 59, 57, 59, 60, 61, 63, 57, 57, 57, 57, 61, 59, 56, 59, 58, 56, 59, 58, 58, 58, 59, 57, 59, 58, 59, 57, 62, 60, 57, 57, 58, 59, 59, 53, 56, 60, 59, 56, 59, 58, 59, 58, 57, 57, 58, 57, 60, 55, 58, 56, 56, 59, 57, 57, 60, 63, 58, 54, 63, 62, 60, 60, 58, 62, 57, 60, 58, 64, 63, 59, 59, 59, 56, 57, 59, 59, 59, 58, 58, 57, 57, 55, 60, 59, 58, 57, 58, 57, 55, 56, 60, 59, 57, 59, 57, 57, 60, 59, 59, 58, 59, 55, 62, 59, 60, 60, 58, 60, 57, 62, 59, 58, 58, 57, 56, 57, 61, 59]),
        (2, [57, 58, 61, 58, 59, 60, 63, 59, 56, 61, 60, 63, 56, 57, 59, 57, 59, 58, 57, 56, 57, 59, 56, 60, 58, 59, 59, 59, 60, 63, 66, 55, 57, 58, 59, 59, 57, 59, 58, 57, 59, 59, 59, 55, 60, 64, 59, 59, 59, 57, 57, 59, 58, 56, 59, 60, 59, 55, 64, 57, 58, 61, 59, 62, 59, 58, 57, 57, 59, 57, 55, 59, 58, 59, 59, 61, 56, 59, 62, 61, 59, 59, 63, 58, 62, 60, 58, 54, 55, 58, 58, 59, 58, 58, 58, 57, 59, 60, 59, 56, 60, 56, 57, 59, 63, 59, 62, 59, 57, 57, 59, 59, 58, 58, 52, 58, 59, 56, 59, 59, 59, 58, 57, 62, 58, 59, 59, 56, 63, 58, 63, 57, 62, 60, 58, 55, 59, 59, 56, 55, 55, 57, 60, 62, 58, 59, 59, 57, 56, 57]),
        (4, [59, 59, 59, 59, 59, 58, 52, 61, 58, 59, 63, 63, 62, 58, 60, 58, 58, 57, 55, 55, 64, 65, 65, 58, 64, 56, 59, 59, 58, 56, 62, 57, 55, 58, 60, 58, 59, 59, 58, 59, 58, 60, 58, 59, 57, 58, 57, 59, 64, 60, 61, 59, 61, 57, 58, 58, 58, 59, 54, 55, 57, 58, 59, 57, 59, 59, 59, 60, 60, 62, 58, 62, 57, 64, 66, 56, 59, 59, 55, 60, 60, 59, 58, 59, 58, 62, 61, 59, 58, 57, 63, 58, 58, 58, 55, 60, 59, 58, 58, 56, 60, 58, 58, 58, 59, 61, 54, 57, 61, 63, 60, 62, 62, 59, 57, 60, 60, 57, 57, 59, 61, 57, 58, 58, 58, 55, 59, 57, 60, 63, 62, 59, 58, 58, 58, 58, 56, 60, 58, 64, 58, 56, 60, 64, 58, 63, 63, 58, 62, 62]),
        (6, [58, 59, 58, 55, 60, 57, 59, 57, 64, 59, 55, 62, 58, 62, 59, 59, 60, 57, 58, 57, 59, 60, 58, 58, 58, 64, 61, 60, 60, 62, 58, 57, 59, 57, 54, 62, 56, 60, 58, 55, 59, 60, 60, 58, 59, 60, 61, 61, 59, 59, 57, 61, 58, 54, 57, 62, 59, 60, 58, 59, 60, 58, 56, 60, 62, 63, 61, 60, 60, 55, 62, 59, 56, 57, 58, 55, 57, 59, 60, 55, 57, 57, 60, 59, 61, 62, 60, 60, 57, 55, 55, 59, 60, 58, 58, 59, 59, 59, 59, 60, 58, 58, 61, 61, 57, 60, 57, 57, 60, 53, 54, 58, 59, 57, 57, 59, 56, 55, 60, 58, 62, 62, 60, 61, 58, 62, 58, 59, 59, 54, 58, 54, 59, 62, 58, 62, 58, 60, 59, 61, 61, 60, 59, 58, 60, 56, 57, 58, 56, 58]),
        (8, [66, 65, 71, 67, 67, 68, 68, 67, 67, 66, 67, 68, 70, 70, 71, 68, 73, 67, 67, 65, 66, 66, 67, 65, 68, 69, 65, 67, 67, 68, 76, 73, 69, 67, 66, 67, 66, 67, 67, 66, 65, 65, 66, 67, 67, 68, 70, 66, 71, 69, 67, 69, 65, 68, 66, 66, 67, 65, 68, 67, 66, 68, 66, 66, 66, 66, 66, 69, 67, 66, 67, 67, 69, 66, 68, 69, 67, 69, 65, 66, 67, 67, 67, 64, 68, 65, 66, 68, 67, 66, 66, 67, 69, 69, 67, 66, 66, 65, 69, 66, 71, 67, 65, 65, 66, 66, 67, 68, 66, 65, 68, 69, 68, 68, 66, 67, 66, 72, 68, 65, 67, 65, 66, 66, 68, 67, 65, 69, 65, 66, 69, 64, 67, 67, 66, 69, 69, 69, 69, 66, 66, 67, 65, 67, 67, 65, 67, 67, 68, 67]),
        (10, [75, 74, 75, 73, 75, 75, 75, 74, 77, 79, 73, 76, 79, 76, 76, 74, 73, 74, 74, 74, 73, 75, 74, 74, 77, 76, 75, 73, 80, 73, 76, 77, 78, 78, 79, 73, 74, 74, 75, 72, 74, 72, 75, 74, 74, 75, 73, 78, 76, 77, 77, 79, 76, 74, 76, 75, 74, 76, 74, 74, 76, 73, 76, 74, 75, 75, 74, 74, 79, 79, 77, 75, 73, 75, 74, 75, 75, 74, 75, 75, 76, 75, 76, 75, 73, 73, 74, 79, 77, 77, 78, 74, 76, 75, 75, 75, 75, 75, 75, 74, 74, 75, 77, 74, 75, 76, 74, 79, 79, 74, 74, 72, 75, 75, 76, 74, 75, 79, 75, 76, 77, 77, 71, 76, 77, 77, 81, 74, 75, 74, 74, 75, 74, 74, 74, 79, 73, 77, 74, 75, 73, 72, 75, 74, 74, 76, 75, 76, 74, 75]),
        (12, [81, 75, 83, 75, 73, 75, 73, 75, 75, 75, 75, 75, 76, 76, 77, 77, 76, 75, 80, 84, 74, 73, 74, 75, 77, 75, 75, 74, 75, 75, 76, 75, 74, 78, 74, 74, 76, 74, 76, 74, 75, 77, 78, 78, 77, 76, 74, 74, 74, 74, 79, 74, 77, 74, 78, 75, 73, 79, 74, 79, 74, 75, 74, 74, 75, 75, 74, 83, 75, 76, 74, 76, 76, 76, 77, 76, 77, 74, 82, 77, 75, 75, 76, 74, 75, 75, 78, 79, 75, 75, 76, 75, 76, 78, 77, 78, 75, 73, 70, 75, 80, 75, 74, 74, 74, 75, 74, 76, 74, 77, 77, 77, 77, 74, 78, 75, 74, 75, 73, 74, 76, 75, 75, 77, 79, 75, 76, 74, 78, 75, 74, 72, 75, 76, 73, 75, 71, 75, 75, 76, 78, 75, 77, 76, 71, 80, 76, 75, 74, 73]),
        (14, [87, 84, 84, 82, 79, 83, 84, 83, 82, 84, 88, 86, 81, 83, 87, 84, 89, 86, 84, 88, 84, 82, 81, 81, 84, 84, 82, 82, 83, 89, 87, 84, 84, 83, 85, 81, 84, 81, 83, 83, 85, 82, 83, 90, 81, 84, 85, 83, 86, 83, 84, 81, 84, 82, 81, 82, 80, 83, 85, 82, 83, 83, 85, 84, 87, 85, 87, 86, 84, 83, 84, 83, 81, 84, 83, 81, 80, 88, 84, 84, 84, 85, 83, 83, 83, 85, 85, 80, 83, 87, 83, 83, 87, 82, 87, 84, 85, 81, 84, 83, 91, 81, 86, 83, 80, 84, 81, 83, 85, 82, 83, 81, 84, 81, 84, 86, 82, 85, 85, 84, 83, 84, 84, 84, 82, 83, 81, 82, 88, 84, 85, 89, 82, 86, 86, 84, 84, 84, 82, 81, 81, 81, 81, 85, 84, 81, 85, 88, 85, 86]),
        (16, [89, 91, 89, 91, 89, 92, 93, 91, 91, 90, 93, 91, 93, 93, 94, 89, 90, 89, 93, 89, 90, 91, 90, 91, 92, 92, 89, 91, 90, 92, 91, 91, 94, 91, 94, 91, 91, 90, 86, 91, 91, 90, 89, 90, 90, 89, 93, 94, 92, 88, 92, 92, 90, 95, 92, 91, 90, 90, 89, 92, 90, 90, 89, 90, 91, 91, 92, 93, 91, 91, 96, 90, 91, 93, 89, 87, 89, 90, 91, 91, 89, 89, 91, 89, 93, 91, 94, 95, 92, 96, 90, 89, 90, 91, 93, 91, 91, 91, 89, 90, 90, 91, 90, 95, 93, 91, 90, 93, 90, 92, 90, 90, 89, 88, 89, 90, 93, 90, 92, 90, 94, 91, 97, 96, 94, 89, 90, 89, 91, 91, 91, 89, 90, 91, 91, 92, 91, 94, 90, 92, 94, 91, 97, 93, 92, 90, 91, 89, 90, 91]),
        (18, [91, 90, 91, 87, 90, 91, 89, 90, 91, 91, 91, 90, 89, 95, 91, 89, 89, 90, 91, 90, 91, 91, 94, 90, 90, 93, 91, 91, 95, 93, 89, 91, 90, 91, 90, 91, 94, 92, 90, 93, 91, 91, 89, 97, 95, 94, 90, 91, 89, 89, 91, 90, 90, 91, 89, 91, 95, 92, 95, 84, 90, 89, 92, 95, 90, 90, 90, 90, 89, 91, 91, 88, 89, 88, 93, 89, 93, 91, 94, 94, 89, 93, 90, 88, 89, 93, 89, 90, 89, 91, 89, 90, 90, 92, 90, 93, 95, 90, 94, 92, 89, 90, 89, 91, 91, 90, 91, 89, 90, 89, 94, 88, 90, 92, 92, 93, 91, 91, 90, 91, 93, 91, 90, 91, 92, 94, 90, 90, 89, 92, 89, 92, 93, 91, 90, 89, 89, 90, 90, 89, 89, 92, 91, 90, 90, 90, 93, 90, 91, 90]),
        (20, [97, 98, 97, 98, 100, 99, 96, 104, 98, 99, 99, 100, 97, 96, 99, 98, 99, 98, 101, 103, 98, 101, 101, 97, 98, 99, 101, 100, 99, 100, 98, 99, 98, 103, 101, 97, 98, 99, 99, 97, 99, 102, 98, 99, 97, 101, 107, 103, 98, 103, 95, 98, 99, 98, 97, 98, 100, 100, 100, 100, 96, 97, 96, 102, 98, 97, 99, 98, 98, 100, 100, 100, 101, 98, 95, 98, 97, 98, 98, 101, 98, 98, 103, 98, 104, 97, 102, 97, 96, 95, 97, 99, 98, 98, 100, 98, 99, 96, 102, 99, 98, 98, 99, 94, 99, 100, 99, 99, 100, 98, 98, 99, 100, 100, 98, 102, 100, 99, 97, 97, 99, 103, 98, 100, 101, 99, 96, 100, 101, 97, 99, 97, 99, 100, 98, 94, 98, 99, 100, 99, 101, 98, 100, 99, 99, 100, 97, 99, 97, 97]),
        (22, [106, 106, 107, 111, 112, 106, 108, 106, 105, 105, 105, 106, 105, 106, 108, 106, 108, 112, 108, 108, 106, 104, 104, 105, 107, 106, 107, 109, 108, 108, 109, 107, 106, 105, 103, 108, 103, 106, 108, 106, 107, 109, 107, 105, 108, 105, 105, 105, 104, 106, 105, 109, 106, 106, 108, 106, 109, 108, 108, 112, 108, 106, 108, 106, 104, 104, 107, 108, 110, 106, 108, 105, 104, 108, 104, 109, 105, 108, 106, 105, 105, 105, 105, 107, 105, 105, 105, 110, 107, 108, 107, 105, 108, 104, 108, 108, 105, 105, 108, 106, 111, 107, 105, 105, 104, 107, 104, 105, 104, 108, 108, 107, 108, 110, 111, 106, 105, 106, 106, 106, 104, 106, 108, 107, 106, 106, 109, 107, 106, 108, 104, 105, 109, 106, 106, 105, 109, 105, 109, 106, 107, 108, 104, 107, 106, 107, 109, 107, 111, 108]),
        (24, [114, 116, 116, 114, 116, 112, 110, 112, 111, 119, 113, 114, 115, 115, 114, 117, 118, 113, 116, 114, 112, 114, 111, 115, 116, 114, 117, 117, 114, 114, 115, 116, 113, 114, 112, 114, 114, 113, 114, 114, 116, 113, 115, 115, 115, 117, 116, 117, 112, 112, 113, 112, 114, 113, 116, 115, 115, 116, 114, 117, 114, 118, 111, 112, 114, 115, 114, 114, 117, 117, 113, 114, 114, 116, 113, 114, 114, 115, 115, 115, 114, 114, 110, 115, 120, 120, 113, 110, 114, 113, 114, 113, 114, 115, 110, 117, 116, 117, 117, 116, 111, 115, 116, 115, 111, 115, 113, 115, 115, 115, 118, 116, 117, 113, 113, 114, 114, 115, 114, 119, 116, 115, 114, 113, 114, 114, 114, 114, 114, 114, 114, 114, 115, 114, 117, 118, 117, 115, 113, 115, 113, 113, 115, 116, 114, 115, 116, 114, 118, 119]),
        (26, [121, 126, 126, 121, 124, 122, 122, 120, 120, 120, 120, 128, 123, 123, 122, 123, 124, 119, 122, 120, 121, 124, 121, 121, 124, 121, 127, 121, 123, 121, 120, 121, 121, 121, 123, 121, 123, 124, 128, 120, 123, 122, 123, 123, 122, 120, 122, 121, 127, 120, 123, 121, 126, 123, 124, 121, 119, 121, 121, 121, 123, 123, 128, 121, 122, 127, 123, 121, 120, 119, 121, 122, 119, 122, 121, 120, 127, 129, 123, 123, 120, 119, 126, 120, 124, 120, 125, 117, 123, 123, 122, 121, 123, 122, 121, 121, 121, 123, 124, 120, 124, 124, 122, 122, 120, 120, 121, 121, 121, 121, 124, 123, 123, 124, 123, 124, 120, 122, 123, 122, 122, 120, 123, 123, 123, 121, 123, 126, 121, 124, 124, 121, 125, 124, 124, 123, 124, 123, 122, 123, 120, 124, 120, 124, 121, 120, 121, 122, 124, 126]),
        (28, [120, 130, 134, 123, 124, 124, 119, 122, 122, 121, 120, 123, 118, 119, 125, 120, 130, 130, 126, 129, 124, 128, 128, 123, 120, 120, 124, 122, 120, 124, 126, 120, 120, 130, 120, 127, 127, 122, 122, 125, 123, 118, 125, 125, 120, 121, 120, 130, 129, 126, 122, 122, 121, 121, 128, 126, 121, 119, 123, 122, 120, 120, 122, 119, 132, 123, 122, 130, 133, 126, 128, 121, 130, 118, 129, 127, 130, 123, 130, 133, 131, 126, 121, 130, 129, 128, 131, 128, 130, 131, 131, 134, 130, 132, 121, 123, 132, 131, 122, 121, 130, 128, 122, 124, 123, 127, 121, 124, 121, 125, 128, 122, 130, 123, 121, 123, 120, 130, 120, 125, 127, 122, 121, 119, 124, 121, 123, 124, 128, 130, 123, 124, 130, 124, 132, 123, 127, 120, 127, 125, 121, 126, 122, 128, 131, 130, 131, 120, 121, 131]),
        (30, [131, 131, 131, 133, 128, 131, 134, 130, 133, 128, 130, 130, 132, 130, 129, 129, 130, 133, 131, 129, 131, 128, 128, 129, 130, 129, 130, 131, 129, 135, 132, 133, 128, 125, 134, 130, 132, 127, 128, 130, 129, 129, 130, 131, 132, 130, 129, 130, 131, 127, 130, 135, 129, 129, 130, 129, 131, 129, 131, 132, 132, 132, 133, 133, 128, 134, 134, 129, 128, 129, 130, 130, 131, 130, 129, 131, 130, 134, 129, 128, 130, 130, 131, 131, 130, 133, 130, 131, 128, 134, 133, 128, 128, 130, 130, 130, 128, 131, 128, 134, 128, 131, 133, 134, 130, 130, 129, 130, 130, 130, 129, 131, 133, 130, 137, 133, 130, 131, 130, 129, 130, 130, 128, 130, 130, 130, 133, 133, 132, 130, 127, 129, 129, 129, 128, 133, 134, 130, 130, 130, 134, 129, 133, 129, 127, 128, 128, 133, 131, 131]),
#        (32, [133, 139, 138, 138, 137, 140, 143, 139, 128, 128, 129, 139, 138, 140, 137, 141, 137, 139, 139, 137, 137, 137, 138, 138, 136, 139, 137, 140, 137, 141, 138, 138, 138, 137, 130, 136, 130, 135, 136, 138, 130, 128, 128, 129, 131, 131, 128, 132, 139, 134, 138, 139, 140, 136, 137, 128, 128, 130, 129, 132, 130, 133, 137, 135, 129, 130, 130, 135, 130, 129, 129, 132, 132, 136, 130, 134, 131, 135, 131, 128, 130, 129, 129, 129, 130, 130, 129, 132, 129, 130, 129, 128, 130, 129, 129, 131, 132, 135, 128, 134, 129, 137, 128, 128, 130, 127, 130, 130, 130, 131, 128, 132, 130, 129, 131, 129, 130, 127, 130, 132, 131, 133, 127, 130, 131, 132, 131, 128, 138, 135, 130, 131, 131, 129, 129, 129, 130, 130, 130, 129, 131, 128, 131, 132, 128, 129, 130, 129, 130, 129]),
#        (34, [129, 131, 127, 129, 127, 129, 129, 131, 129, 131, 131, 135, 129, 132, 137, 130, 130, 129, 131, 129, 133, 130, 135, 132, 129, 129, 130, 129, 129, 128, 128, 130, 130, 137, 128, 131, 131, 129, 130, 131, 132, 128, 132, 131, 131, 126, 129, 130, 131, 129, 130, 130, 131, 129, 132, 128, 132, 131, 132, 132, 129, 131, 131, 130, 128, 136, 139, 138, 132, 132, 129, 127, 129, 129, 128, 129, 129, 128, 130, 128, 132, 131, 130, 130, 131, 127, 131, 132, 135, 131, 138, 138, 136, 137, 128, 129, 130, 132, 130, 131, 132, 129, 132, 129, 136, 130, 129, 128, 130, 128, 130, 131, 138, 130, 130, 137, 138, 137, 138, 130, 129, 129, 133, 130, 133, 128, 134, 128, 128, 131, 128, 130, 130, 130, 132, 131, 131, 129, 130, 131, 132, 141, 138, 131, 129, 135, 133, 129, 129, 129]),
#        (36, [132, 128, 128, 130, 128, 128, 130, 130, 132, 132, 133, 130, 129, 130, 131, 131, 129, 129, 129, 131, 132, 129, 134, 131, 133, 127, 130, 130, 131, 131, 129, 130, 130, 132, 132, 128, 125, 131, 131, 132, 128, 140, 129, 142, 143, 142, 138, 140, 138, 128, 132, 128, 128, 130, 130, 132, 128, 129, 129, 128, 130, 132, 130, 133, 130, 135, 129, 129, 130, 127, 130, 128, 132, 132, 134, 132, 138, 138, 130, 129, 130, 128, 131, 129, 133, 131, 129, 132, 130, 129, 129, 129, 130, 129, 131, 130, 132, 133, 128, 130, 131, 129, 134, 131, 142, 141, 136, 130, 135, 126, 128, 129, 129, 129, 131, 130, 131, 129, 132, 130, 128, 128, 128, 127, 129, 130, 132, 131, 133, 129, 139, 130, 128, 130, 128, 129, 127, 129, 131, 131, 132, 128, 132, 129, 126, 131, 129, 132, 128, 131]),
    ]

    # OUTPUT
    left_lidar_readings = [
        (0, ),
        (2, ),
        (4, ),
        (6, ),
        (8, ),
        (10, ),
        (12, ),
        (14, ),
        (16, ),
        (18, ),
        (20, ),
        (22, ),
        (24, ),
        (26, ),
        (28, ),
        (30, ),
        (32, ),
        (34, ),
        (36, ),
    ]

    linear_fit(front_sonar_readings)
